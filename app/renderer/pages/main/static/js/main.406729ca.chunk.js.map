{"version":3,"sources":["../external \"crypto\"","AppContext.js","components/TypeMenu.jsx","components/TypeCard.jsx","components/AddCard.jsx","localStorageUtil.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","createContext","selectType","setSelectType","typeMenus","typeCards","addCard","removeCard","props","useContext","AppContext","mode","selectedKeys","style","height","borderRight","onClick","key","map","menu","Item","lineHeight","total","useState","showIndex","setShowIndex","showCard","setShowCard","useEffect","index","length","className","title","content","modalShow","setModalShow","Form","useForm","form","resetFields","type","size","block","visible","onOk","validateFields","then","newCard","getFieldsValue","catch","onCancel","forceRender","initialValues","label","labelCol","span","wrapperCol","name","rules","required","message","TextArea","ls","window","localStorage","get","result","getItem","JSON","parse","e","set","value","stringify","setItem","remove","removeItem","Sider","Layout","Header","Footer","Content","App","collapsed","setCollapsed","types","typeToCards","data","setData","lsApi","useMemo","cards","concat","menus","typeTotal","push","unshift","contextValue","card","newData","id","uuid","genV1","toString","indexOf","newCards","removeCardIndex","some","item","splice","removeTypeIndex","Provider","collapsedWidth","width","background","AddCard","TypeMenu","position","UnorderedListOutlined","TypeCard","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.406729ca.chunk.js","sourcesContent":["module.exports = require(\"crypto\");","import { createContext } from \"react\";\n\nexport default createContext({\n  selectType: \"\",\n  setSelectType: () => {},\n  typeMenus: [],\n  typeCards: [],\n  addCard: () => {},\n  removeCard: () => {},\n});\n","import React, { useContext } from \"react\";\nimport { Menu } from \"antd\";\nimport AppContext from \"../AppContext\";\n\nexport default (props) => {\n  const { selectType, setSelectType, typeMenus } = useContext(AppContext);\n\n  return (\n    <Menu\n      mode=\"inline\"\n      selectedKeys={[selectType]}\n      style={{ height: \"100%\", borderRight: 0 }}\n      onClick={({ key }) => {\n        setSelectType(key);\n      }}\n    >\n      {typeMenus.map((menu) => (\n        <Menu.Item\n          key={menu.key}\n          style={{ height: \"24px\", lineHeight: \"24px\" }}\n        >{`${menu.key} (${menu.total})`}</Menu.Item>\n      ))}\n    </Menu>\n  );\n};\n","import { Button } from \"antd\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport AppContext from \"../AppContext\";\n\nexport default () => {\n  const [showIndex, setShowIndex] = useState(0);\n  const [showCard, setShowCard] = useState(null);\n  const { selectType, typeCards, removeCard } = useContext(AppContext);\n\n  useEffect(() => {\n    if (selectType) {\n      setShowIndex(0);\n    }\n  }, [selectType]);\n\n  useEffect(() => {\n    if (typeCards) {\n      let index = showIndex;\n      if (showIndex >= typeCards.length) {\n        index = typeCards.length - 1;\n        setShowIndex(typeCards.length - 1);\n      }\n      setShowCard(typeCards[index]);\n    } else {\n      setShowCard(null);\n    }\n  }, [typeCards, showIndex]);\n\n  return (\n    <>\n      {showCard ? (\n        <div className=\"cardBox\">\n          <div className=\"typeCard\">\n            <div className=\"cardHeader\">\n              <span>{showCard.title}</span>\n            </div>\n            <div className=\"cardContent \">\n              <span>{showCard.content}</span>\n            </div>\n          </div>\n\n          <div className=\"typeBtnBox\">\n            <Button>上一张</Button>\n            <Button>查 看</Button>\n            <Button>下一张</Button>\n          </div>\n        </div>\n      ) : (\n        \"暂无卡片\"\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { Button, Modal, Form, Input } from \"antd\";\nimport AppContext from \"../AppContext\";\n\nexport default () => {\n  const [modalShow, setModalShow] = useState(false);\n  const { addCard } = useContext(AppContext);\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    if (modalShow) {\n      form.resetFields();\n    }\n  }, [modalShow]);\n\n  function onStateOk() {\n    form\n      .validateFields()\n      .then(() => {\n        const newCard = form.getFieldsValue();\n        addCard(newCard);\n        setModalShow(false);\n      })\n      .catch(() => {});\n  }\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        size=\"small\"\n        block\n        onClick={() => {\n          setModalShow(true);\n        }}\n      >\n        新增卡片\n      </Button>\n      <Modal\n        title={\"新增开片\"}\n        visible={modalShow}\n        onOk={onStateOk}\n        onCancel={() => setModalShow(false)}\n        forceRender\n      >\n        <Form initialValues={{}} size=\"small\" form={form}>\n          <Form.Item\n            label=\"卡片类型\"\n            labelCol={{ span: 6 }}\n            wrapperCol={{ span: 18 }}\n            name=\"type\"\n            rules={[{ required: true, message: \"不可为空\" }]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label=\"卡片标题\"\n            labelCol={{ span: 6 }}\n            wrapperCol={{ span: 18 }}\n            name=\"title\"\n            rules={[{ required: true, message: \"不可为空\" }]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label=\"卡片内容\"\n            labelCol={{ span: 6 }}\n            wrapperCol={{ span: 18 }}\n            name=\"content\"\n            rules={[{ required: true, message: \"不可为空\" }]}\n          >\n            <Input.TextArea />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n","let ls = window.localStorage;\n\nfunction get(key) {\n  if (!key) {\n    return;\n  }\n  let result = ls.getItem(key);\n  try {\n    if (result) {\n      result = JSON.parse(result);\n    }\n  } catch (e) {}\n  return result;\n}\n\nfunction set(key, value) {\n  if (!key) {\n    return;\n  }\n  if (value && typeof value === \"object\") {\n    value = JSON.stringify(value);\n  }\n  ls.setItem(key, value);\n}\n\nfunction remove(key) {\n  if (!key) {\n    return;\n  }\n  ls.removeItem(key);\n}\n\nexport default { get, set, remove };\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport \"./App.css\";\n\n// import { ipcRenderer } from \"electron\";\n//const {ipcRenderer} = window.require('electron');\n\nimport { Button, Layout } from \"antd\";\nimport TypeMenu from \"./components/TypeMenu\";\nimport { UnorderedListOutlined } from \"@ant-design/icons\";\nimport TypeCard from \"./components/TypeCard\";\nimport AddCard from \"./components/AddCard\";\nimport AppContext from \"./AppContext\";\nimport lsApi from \"./localStorageUtil\";\nimport uuid from \"uuidjs\";\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(false);\n  const [data, setData] = useState({ types: [], typeToCards: {} });\n  const [selectType, setSelectType] = useState(\"全部\");\n\n  useEffect(() => {\n    let result = lsApi.get(\"cardData\");\n    if (result) {\n      setData(result);\n    }\n  }, []);\n\n  const addCard = (card) => {\n    let newData = { ...data };\n    let type = card.type;\n    card.id = uuid.genV1().toString();\n    if (newData.types.indexOf(type) === -1) {\n      newData.types.push(type);\n      newData.typeToCards[type] = [];\n    }\n    let newCards = newData.typeToCards[type];\n    newCards.push({ ...card });\n    lsApi.set(\"cardData\", newData);\n    setData(newData);\n  };\n\n  const removeCard = (card) => {\n    let newData = { ...data };\n    let type = card.type;\n    let newCards = newData.typeToCards[type];\n    if (newCards) {\n      let removeCardIndex = -1;\n      newCards.some((item, index) => {\n        if (item.id === card.id) {\n          removeCardIndex = index;\n          return true;\n        }\n      });\n      if (removeCardIndex > -1) {\n        newCards.splice(removeCardIndex, 1);\n        if (newCards.length === 0) {\n          delete newData.typeToCards[type];\n          let removeTypeIndex = newData.types.indexOf(type);\n          if (removeTypeIndex > -1) {\n            newData.types.splice(removeTypeIndex, 1);\n          }\n        }\n      }\n    }\n    lsApi.set(\"cardData\", newData);\n    setData(newData);\n  };\n\n  let typeCards = useMemo(() => {\n    let cards = [];\n    let { types, typeToCards } = data;\n    if (selectType === \"全部\") {\n      types.map((type) => {\n        cards = cards.concat(typeToCards[type] || []);\n      });\n    } else {\n      cards = cards.concat(typeToCards[selectType] || []);\n    }\n    return cards;\n  }, [data, selectType]);\n\n  let typeMenus = useMemo(() => {\n    let menus = [];\n    let total = 0;\n    let { types, typeToCards } = data;\n    types.map((type) => {\n      let typeTotal = (typeToCards[type] || []).length;\n      menus.push({ key: type, total: typeTotal });\n      total += typeTotal;\n    });\n    menus.unshift({ key: \"全部\", total });\n    return menus;\n  }, [data]);\n\n  let contextValue = {\n    selectType,\n    setSelectType,\n    typeCards,\n    typeMenus,\n    addCard,\n    removeCard,\n  };\n\n  return (\n    <AppContext.Provider value={contextValue}>\n      <div className=\"App\">\n        <Layout style={{ height: \"100%\" }}>\n          <Sider\n            collapsed={collapsed}\n            collapsedWidth=\"0\"\n            className=\"rollingBox\"\n            width={150}\n            style={{\n              height: \"100%\",\n              background: \"#ffffff\",\n            }}\n          >\n            <AddCard />\n            <div style={{ height: \"calc(100% -24px\" }} className=\"rollingBox\">\n              <TypeMenu />\n            </div>\n          </Sider>\n          <Layout>\n            <Content style={{ position: \"relative\" }}>\n              <div className=\"collapsedBtn\">\n                <UnorderedListOutlined\n                  onClick={() => {\n                    setCollapsed((collapsed) => !!!collapsed);\n                  }}\n                />\n              </div>\n              <TypeCard />\n            </Content>\n          </Layout>\n        </Layout>\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}